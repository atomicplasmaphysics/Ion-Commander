from time import time

import numpy as np
from scipy.stats import lognorm, kstest
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt


offsetx = 300
xdata = offsetx + np.array([575.14, 575.22, 575.3, 575.38, 575.46, 575.54, 575.62, 575.7, 575.78, 575.86, 575.94, 576.02, 576.1, 576.18, 576.26, 576.34, 576.42, 576.5, 576.58, 576.66, 576.74, 576.82, 576.9, 576.98, 577.06, 577.14, 577.22, 577.3, 577.38, 577.46, 577.54, 577.62, 577.7, 577.78, 577.86, 577.94, 578.02, 578.1, 578.18, 578.26, 578.34, 578.42, 578.5, 578.58, 578.66, 578.74, 578.82, 578.9, 578.98, 579.06, 579.14, 579.22, 579.3, 579.38, 579.46, 579.54, 579.62, 579.7, 579.78, 579.86, 579.94, 580.02, 580.1, 580.18, 580.26, 580.34, 580.42, 580.5, 580.58, 580.66, 580.74, 580.82, 580.9, 580.98, 581.06, 581.14, 581.22, 581.3, 581.38, 581.46, 581.54, 581.62, 581.7, 581.78, 581.86, 581.94, 582.02, 582.1, 582.18, 582.26, 582.34, 582.42, 582.5, 582.58, 582.66, 582.74, 582.82, 582.9, 582.98, 583.06, 583.14, 583.22, 583.3, 583.38, 583.46, 583.54, 583.62, 583.7, 583.78, 583.86, 583.94, 584.02, 584.1, 584.18, 584.26, 584.34, 584.42, 584.5, 584.58, 584.66, 584.74, 584.82, 584.9, 584.98, 585.06, 585.14, 585.22, 585.3, 585.38, 585.46, 585.54, 585.62, 585.7, 585.78, 585.86, 585.94, 586.02, 586.1, 586.18, 586.26, 586.34, 586.42, 586.5, 586.58, 586.66, 586.74, 586.82, 586.9, 586.98, 587.06, 587.14, 587.22, 587.3, 587.38, 587.46, 587.54, 587.62, 587.7, 587.78, 587.86, 587.94, 588.02, 588.1, 588.18, 588.26, 588.34, 588.42, 588.5, 588.58, 588.66, 588.74, 588.82, 588.9, 588.98, 589.06, 589.14, 589.22, 589.3, 589.38, 589.46, 589.54, 589.62, 589.7, 589.78, 589.86, 589.94, 590.02, 590.1, 590.18, 590.26, 590.34, 590.42, 590.5, 590.58, 590.66, 590.74, 590.82, 590.9, 590.98, 591.06, 591.14, 591.22, 591.3, 591.38, 591.46, 591.54, 591.62, 591.7, 591.78, 591.86, 591.94, 592.02, 592.1, 592.18, 592.26, 592.34, 592.42, 592.5, 592.58, 592.66, 592.74, 592.82, 592.9, 592.98, 593.06, 593.14, 593.22, 593.3, 593.38, 593.46, 593.54, 593.62, 593.7, 593.78, 593.86, 593.94, 594.02, 594.1, 594.18, 594.26, 594.34, 594.42, 594.5, 594.58, 594.66, 594.74, 594.82, 594.9, 594.98, 595.06, 595.14, 595.22, 595.3, 595.38, 595.46, 595.54, 595.62, 595.7, 595.78, 595.86, 595.94, 596.02, 596.1, 596.18, 596.26, 596.34, 596.42, 596.5, 596.58, 596.66, 596.74, 596.82, 596.9, 596.98, 597.06, 597.14, 597.22, 597.3, 597.38, 597.46, 597.54, 597.62, 597.7, 597.78, 597.86, 597.94, 598.02, 598.1, 598.18, 598.26, 598.34, 598.42, 598.5, 598.58, 598.66, 598.74, 598.82, 598.9, 598.98, 599.06, 599.14, 599.22, 599.3, 599.38, 599.46, 599.54, 599.62, 599.7, 599.78, 599.86, 599.94, 600.02, 600.1, 600.18, 600.26, 600.34, 600.42, 600.5, 600.58, 600.66, 600.74, 600.82, 600.9, 600.98, 601.06, 601.14, 601.22, 601.3, 601.38, 601.46, 601.54, 601.62, 601.7, 601.78, 601.86, 601.94, 602.02, 602.1, 602.18, 602.26, 602.34, 602.42, 602.5, 602.58, 602.66, 602.74, 602.82, 602.9, 602.98, 603.06, 603.14, 603.22, 603.3, 603.38, 603.46, 603.54, 603.62, 603.7, 603.78, 603.86, 603.94, 604.02, 604.1, 604.18, 604.26, 604.34, 604.42, 604.5, 604.58, 604.66, 604.74, 604.82, 604.9, 604.98, 605.06, 605.14, 605.22, 605.3, 605.38, 605.46, 605.54, 605.62, 605.7, 605.78, 605.86, 605.94, 606.02, 606.1, 606.18, 606.26, 606.34, 606.42, 606.5, 606.58, 606.66, 606.74, 606.82, 606.9, 606.98, 607.06, 607.14, 607.22, 607.3, 607.38, 607.46, 607.54, 607.62, 607.7, 607.78, 607.86, 607.94, 608.02, 608.1, 608.18, 608.26, 608.34, 608.42, 608.5, 608.58, 608.66, 608.74, 608.82, 608.9, 608.98, 609.06, 609.14, 609.22, 609.3, 609.38, 609.46, 609.54, 609.62, 609.7, 609.78, 609.86, 609.94, 610.02, 610.1, 610.18, 610.26, 610.34, 610.42, 610.5, 610.58, 610.66, 610.74, 610.82, 610.9, 610.98, 611.06, 611.14, 611.22, 611.3, 611.38, 611.46, 611.54, 611.62, 611.7, 611.78, 611.86, 611.94, 612.02, 612.1, 612.18, 612.26, 612.34, 612.42, 612.5, 612.58, 612.66, 612.74, 612.82, 612.9, 612.98, 613.06, 613.14])
ydata = np.array([25.0, 25.0, 33.0, 22.0, 23.0, 20.0, 17.0, 18.0, 17.0, 20.0, 35.0, 16.0, 24.0, 28.0, 28.0, 28.0, 32.0, 26.0, 22.0, 31.0, 23.0, 27.0, 20.0, 29.0, 25.0, 27.0, 25.0, 28.0, 30.0, 21.0, 26.0, 31.0, 30.0, 31.0, 28.0, 40.0, 31.0, 25.0, 48.0, 50.0, 43.0, 39.0, 43.0, 32.0, 36.0, 35.0, 33.0, 30.0, 40.0, 39.0, 37.0, 39.0, 38.0, 54.0, 39.0, 35.0, 38.0, 51.0, 39.0, 65.0, 52.0, 45.0, 54.0, 54.0, 41.0, 56.0, 54.0, 59.0, 69.0, 67.0, 52.0, 53.0, 48.0, 70.0, 71.0, 80.0, 71.0, 64.0, 73.0, 67.0, 85.0, 55.0, 82.0, 68.0, 77.0, 79.0, 87.0, 94.0, 81.0, 87.0, 100.0, 82.0, 69.0, 97.0, 77.0, 85.0, 102.0, 87.0, 98.0, 88.0, 97.0, 100.0, 103.0, 95.0, 113.0, 109.0, 94.0, 113.0, 100.0, 118.0, 121.0, 113.0, 107.0, 110.0, 90.0, 126.0, 136.0, 131.0, 129.0, 148.0, 139.0, 136.0, 137.0, 159.0, 132.0, 167.0, 135.0, 165.0, 147.0, 140.0, 149.0, 166.0, 161.0, 175.0, 159.0, 167.0, 155.0, 182.0, 162.0, 175.0, 191.0, 201.0, 183.0, 184.0, 184.0, 170.0, 190.0, 189.0, 195.0, 186.0, 204.0, 207.0, 201.0, 216.0, 188.0, 222.0, 226.0, 229.0, 215.0, 244.0, 211.0, 222.0, 236.0, 227.0, 204.0, 268.0, 263.0, 268.0, 270.0, 254.0, 289.0, 270.0, 258.0, 290.0, 266.0, 312.0, 294.0, 286.0, 318.0, 297.0, 307.0, 303.0, 303.0, 334.0, 288.0, 336.0, 338.0, 363.0, 309.0, 347.0, 374.0, 352.0, 318.0, 336.0, 354.0, 343.0, 355.0, 341.0, 379.0, 352.0, 349.0, 388.0, 382.0, 400.0, 389.0, 435.0, 367.0, 402.0, 399.0, 379.0, 412.0, 430.0, 398.0, 368.0, 394.0, 422.0, 409.0, 367.0, 415.0, 413.0, 397.0, 392.0, 422.0, 426.0, 434.0, 407.0, 432.0, 451.0, 399.0, 464.0, 429.0, 463.0, 428.0, 438.0, 421.0, 425.0, 414.0, 432.0, 476.0, 442.0, 431.0, 432.0, 433.0, 461.0, 452.0, 467.0, 446.0, 479.0, 444.0, 449.0, 431.0, 442.0, 447.0, 439.0, 433.0, 423.0, 454.0, 456.0, 452.0, 435.0, 455.0, 430.0, 422.0, 436.0, 468.0, 461.0, 426.0, 427.0, 394.0, 400.0, 424.0, 454.0, 447.0, 447.0, 368.0, 402.0, 423.0, 413.0, 417.0, 406.0, 412.0, 395.0, 415.0, 390.0, 405.0, 389.0, 381.0, 417.0, 378.0, 366.0, 379.0, 342.0, 366.0, 393.0, 378.0, 365.0, 351.0, 341.0, 381.0, 341.0, 332.0, 348.0, 323.0, 346.0, 328.0, 319.0, 314.0, 310.0, 303.0, 309.0, 275.0, 314.0, 281.0, 279.0, 277.0, 283.0, 261.0, 257.0, 229.0, 235.0, 243.0, 244.0, 263.0, 231.0, 225.0, 234.0, 242.0, 251.0, 218.0, 231.0, 241.0, 205.0, 237.0, 206.0, 180.0, 203.0, 198.0, 176.0, 207.0, 173.0, 168.0, 160.0, 164.0, 171.0, 144.0, 142.0, 140.0, 144.0, 143.0, 115.0, 112.0, 147.0, 125.0, 116.0, 112.0, 132.0, 113.0, 109.0, 114.0, 128.0, 109.0, 104.0, 104.0, 98.0, 85.0, 100.0, 71.0, 78.0, 81.0, 71.0, 73.0, 89.0, 83.0, 69.0, 66.0, 62.0, 56.0, 70.0, 59.0, 55.0, 61.0, 47.0, 54.0, 53.0, 52.0, 55.0, 39.0, 39.0, 38.0, 38.0, 32.0, 31.0, 32.0, 27.0, 33.0, 34.0, 25.0, 17.0, 20.0, 26.0, 21.0, 21.0, 15.0, 15.0, 8.0, 24.0, 14.0, 9.0, 15.0, 10.0, 11.0, 11.0, 7.0, 7.0, 3.0, 6.0, 3.0, 2.0, 4.0, 4.0, 6.0, 3.0, 1.0, 2.0, 1.0, 6.0, 0.0, 3.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 3.0, 2.0, 4.0, 0.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 3.0, 1.0, 1.0, 2.0, 1.0, 4.0, 1.0, 0.0, 2.0, 6.0, 0.0, 3.0, 3.0, 1.0, 4.0, 5.0, 2.0, 2.0, 0.0, 1.0, 5.0, 3.0, 1.0, 1.0, 1.0, 0.0, 3.0], dtype=int)
data = np.repeat(xdata, ydata)
#print(data)

def lognorm_fit_orig(x, loc, shape, scale):
    x = (x - loc) / scale
    return 1 / (shape * x * np.sqrt(2 * np.pi)) * np.exp(-np.square(np.log(x)) / (2 * np.square(shape)))

def lognorm_fit(x, mu, sigma, c, x0):
    return c * np.exp(-0.5 * np.square((np.log(x-x0) - mu)) / np.square(sigma))

def gauss_fit(x, mu, sigma, c):
    return c * np.exp(-np.square(x - mu) / (2 * np.square(sigma)))

def integral(x, y):
    return np.sum((x[1] - x[0]) * y)

def print_info(name, x, y, **kwargs):
    print(f'Info for "{name}"')
    print(f'  Integral: {integral(x, y)}')
    for key, value in kwargs.items():
        print(f'  {key}: {value}')


# Generate synthetic log-normal distributed data with an offset
#np.random.seed(42)
#offset = 300.0  # Set your desired offset
#data = np.random.lognormal(mean=0.0, sigma=0.7, size=1000) + offset
#print(data)

# Plot the histogram of the data
plt.plot(xdata, ydata, color='green', label='original')

starttime = time()
shape, loc, scale = lognorm.fit(data)
print(f'Scipy fit took {time() - starttime}s')

# Plot the fitted log-normal distribution
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)

yspscaled = lognorm.pdf((x - loc) / scale, shape)
plt.plot(x, yspscaled, color='blue', linewidth=2, label='scaled lognorm')
print_info('scipy self scaled', x, yspscaled, shape=shape, loc=loc, scale=scale)

ysp = lognorm.pdf(x, shape, loc=loc, scale=scale)
plt.plot(x, ysp, color='red', linewidth=2, label='lognorm')
print_info('scipy', x, ysp, shape=shape, loc=loc, scale=scale)

starttime = time()
popt = curve_fit(lognorm_fit, xdata, ydata, maxfev=2000)
print(f'Self fit took {time() - starttime}s')
yself = lognorm_fit(x, *popt[0])
plt.plot(x, yself, color='orange', linewidth=2, label='own fit')
print_info('own fit', x, yself, mu=popt[0][0], sigma=popt[0][1], c=popt[0][2], shift=popt[0][3])


# Test the goodness of fit using Kolmogorov-Smirnov test
#ks_statistic, ks_p_value = kstest(data, 'lognorm', args=(shape, loc, scale))
#print(f'KS Statistic: {ks_statistic}\nP-value: {ks_p_value}')
#print(f'mean  = {np.exp((loc / scale) + shape ** 2 / 2)}')
#print(f'sdt   = {np.sqrt((np.exp(shape ** 2) - 1) * np.exp(2 * (loc / scale) + shape ** 2))}')


# Show the plot
plt.legend()
plt.show()
